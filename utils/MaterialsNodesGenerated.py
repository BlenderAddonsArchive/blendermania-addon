import bpy

# WARNING
# WARNING
# WARNING
# this file is autogenerated, DO NOT CHANGE MANUALLY
# WARNING
# WARNING
# WARNING

def _create_nodes_DecalGeom(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = 300.0,60.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-20.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-580.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-860.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = 300.0,240.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["sep_hue"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_hue"].location = 660.0,-20.0
	created_nodes["sep_hue"].name = "sep_hue"
	created_nodes["sep_hue"].label = "Get HUE mask"
	created_nodes["sep_hue"].mode = "RGB"

	created_nodes["mix_color0"] = nodes.new(type="ShaderNodeMix")
	created_nodes["mix_color0"].location = 1000.0,-300.0
	created_nodes["mix_color0"].name = "mix_color0"
	created_nodes["mix_color0"].label = ""
	created_nodes["mix_color0"].blend_type = "MIX"
	created_nodes["mix_color0"].data_type = "FLOAT"
	created_nodes["mix_color0"].inputs["Factor"].default_value = 1.0
	created_nodes["mix_color0"].inputs["A"].default_value = 0.0
	created_nodes["mix_color0"].inputs["B"].default_value = 0.0

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 480.0,-860.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1940.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1660.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["color0"] = nodes.new(type="ShaderNodeAttribute")
	created_nodes["color0"].location = 840.0,-300.0
	created_nodes["color0"].name = "color0"
	created_nodes["color0"].label = "Color0"
	created_nodes["color0"].attribute_name = "Color"

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 480.0,-580.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-20.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 840.0,-20.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "HUE"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Sat"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Sat"].location = 1000.0,-20.0
	created_nodes["Apply _D Sat"].name = "Apply _D Sat"
	created_nodes["Apply _D Sat"].label = "Apply _D Sat"
	created_nodes["Apply _D Sat"].blend_type = "SATURATION"
	created_nodes["Apply _D Sat"].data_type = "RGBA"
	created_nodes["Apply _D Sat"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Sat"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Sat"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Val"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Val"].location = 1160.0,-20.0
	created_nodes["Apply _D Val"].name = "Apply _D Val"
	created_nodes["Apply _D Val"].label = "Apply _D Val"
	created_nodes["Apply _D Val"].blend_type = "VALUE"
	created_nodes["Apply _D Val"].data_type = "RGBA"
	created_nodes["Apply _D Val"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Val"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Val"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Apply _D Sat"].inputs[6])
	links.new(created_nodes["Apply _D Sat"].outputs[2], created_nodes["Apply _D Val"].inputs[6])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["Apply _D Val"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Sat"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Val"].inputs[7])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["sep_hue"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Sat"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Val"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["mix_color0"].outputs[0], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["mix_color0"].inputs[3])
	links.new(created_nodes["color0"].outputs[3], created_nodes["mix_color0"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[2], created_nodes["Principled BSDF"].inputs[12])

	return mat

def _create_nodes_DecalGeom_TOp_PyPxzDSN_X2(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1000.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 720.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-580.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-860.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 480.0,-580.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 480.0,-860.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["tex_M"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_M"].location = 200.0,-1140.0
	created_nodes["tex_M"].name = "tex_M"
	created_nodes["tex_M"].label = "Texture Mask _M.dds"
	created_nodes["tex_M"].projection = "FLAT"

	created_nodes["mix_color0"] = nodes.new(type="ShaderNodeMix")
	created_nodes["mix_color0"].location = 480.0,-1160.0
	created_nodes["mix_color0"].name = "mix_color0"
	created_nodes["mix_color0"].label = ""
	created_nodes["mix_color0"].blend_type = "MIX"
	created_nodes["mix_color0"].data_type = "FLOAT"
	created_nodes["mix_color0"].inputs["Factor"].default_value = 1.0
	created_nodes["mix_color0"].inputs["A"].default_value = 0.0
	created_nodes["mix_color0"].inputs["B"].default_value = 0.0

	created_nodes["color0"] = nodes.new(type="ShaderNodeAttribute")
	created_nodes["color0"].location = 300.0,-1420.0
	created_nodes["color0"].name = "color0"
	created_nodes["color0"].label = "Color0"
	created_nodes["color0"].attribute_name = "Color"


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["color0"].outputs[3], created_nodes["mix_color0"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_M"].inputs[0])
	links.new(created_nodes["tex_M"].outputs[0], created_nodes["mix_color0"].inputs[3])
	links.new(created_nodes["mix_color0"].outputs[0], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[2], created_nodes["Principled BSDF"].inputs[12])

	return mat

def _create_nodes_DynaFacing_ForceNMap_CubeOut_TestOp(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1120.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 840.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-580.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-860.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 480.0,-860.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 480.0,-580.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["sep_r"].outputs[2], created_nodes["Principled BSDF"].inputs[12])

	return mat

def _create_nodes_GlassBasic(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1220.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 940.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 0.800000011920929

	created_nodes["cus_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["cus_color"].location = 740.0,-300.0
	created_nodes["cus_color"].name = "cus_color"
	created_nodes["cus_color"].label = "Custom Color"


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["cus_color"].outputs[0], created_nodes["Principled BSDF"].inputs[0])

	return mat

def _create_nodes_GrassX2(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1240.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 940.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = ""
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 3.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -100.0,-320.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 240.0,-320.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 240.0,-600.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 240.0,-880.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 520.0,-600.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 520.0,-880.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = 60.0,-320.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "Base Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.0009765625


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[2], created_nodes["Principled BSDF"].inputs[3])

	return mat

def _create_nodes_PyPxz_Hue(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1420.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-900.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "BOX"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-600.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "BOX"

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1140.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 3.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["cus_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["cus_color"].location = 760.0,-100.0
	created_nodes["cus_color"].name = "cus_color"
	created_nodes["cus_color"].label = "Custom Color"

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -220.0,-300.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "BOX"

	created_nodes["sep_d"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_d"].location = 760.0,-300.0
	created_nodes["sep_d"].name = "sep_d"
	created_nodes["sep_d"].label = ""
	created_nodes["sep_d"].mode = "RGB"

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 760.0,-580.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 760.0,-860.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["mix_d"] = nodes.new(type="ShaderNodeMix")
	created_nodes["mix_d"].location = 960.0,-300.0
	created_nodes["mix_d"].name = "mix_d"
	created_nodes["mix_d"].label = ""
	created_nodes["mix_d"].blend_type = "MIX"
	created_nodes["mix_d"].data_type = "RGBA"
	created_nodes["mix_d"].inputs["Factor"].default_value = 0.5
	created_nodes["mix_d"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["mix_d"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = -20.0,-300.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.125


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["sep_d"].outputs[1], created_nodes["mix_d"].inputs[0])
	links.new(created_nodes["sep_d"].outputs[0], created_nodes["mix_d"].inputs[6])
	links.new(created_nodes["cus_color"].outputs[0], created_nodes["mix_d"].inputs[7])
	links.new(created_nodes["mix_d"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["sep_d"].inputs[0])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[2], created_nodes["Principled BSDF"].inputs[12])

	return mat

def _create_nodes_PyPxzDiff_Spec_Norm(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1760.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1480.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 1.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -260.0,-300.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "BOX"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-600.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "BOX"

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = 300.0,20.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = 300.0,200.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-60.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "BOX"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-900.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "BOX"

	created_nodes["sep_hue"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_hue"].location = 660.0,-60.0
	created_nodes["sep_hue"].name = "sep_hue"
	created_nodes["sep_hue"].label = ""
	created_nodes["sep_hue"].mode = "RGB"

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 480.0,-580.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 480.0,-860.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 840.0,-60.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "HUE"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Sat"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Sat"].location = 1000.0,-60.0
	created_nodes["Apply _D Sat"].name = "Apply _D Sat"
	created_nodes["Apply _D Sat"].label = "Apply _D Sat"
	created_nodes["Apply _D Sat"].blend_type = "SATURATION"
	created_nodes["Apply _D Sat"].data_type = "RGBA"
	created_nodes["Apply _D Sat"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Sat"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Sat"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Val"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Val"].location = 1160.0,-60.0
	created_nodes["Apply _D Val"].name = "Apply _D Val"
	created_nodes["Apply _D Val"].label = "Apply _D Val"
	created_nodes["Apply _D Val"].blend_type = "VALUE"
	created_nodes["Apply _D Val"].data_type = "RGBA"
	created_nodes["Apply _D Val"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Val"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Val"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-60.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = -60.0,-300.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.03125


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Apply _D Sat"].inputs[6])
	links.new(created_nodes["Apply _D Sat"].outputs[2], created_nodes["Apply _D Val"].inputs[6])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Sat"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Val"].inputs[7])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["sep_hue"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Sat"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Val"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["Apply _D Val"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_N"].inputs[0])

	return mat

def _create_nodes_PyPxzDiff_Spec_Norm_LM1(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -220.0,-300.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = 300.0,240.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = 300.0,60.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1680.0,-280.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1400.0,-280.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-600.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "BOX"

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "BOX"

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-20.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "BOX"

	created_nodes["sep_r"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_r"].location = 760.0,-580.0
	created_nodes["sep_r"].name = "sep_r"
	created_nodes["sep_r"].label = ""
	created_nodes["sep_r"].mode = "RGB"

	created_nodes["sep_hue"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["sep_hue"].location = 660.0,-20.0
	created_nodes["sep_hue"].name = "sep_hue"
	created_nodes["sep_hue"].label = ""
	created_nodes["sep_hue"].mode = "RGB"

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-20.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Apply _D Sat"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Sat"].location = 1000.0,-20.0
	created_nodes["Apply _D Sat"].name = "Apply _D Sat"
	created_nodes["Apply _D Sat"].label = "Apply _D Sat"
	created_nodes["Apply _D Sat"].blend_type = "SATURATION"
	created_nodes["Apply _D Sat"].data_type = "RGBA"
	created_nodes["Apply _D Sat"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Sat"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Sat"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Val"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Val"].location = 1160.0,-20.0
	created_nodes["Apply _D Val"].name = "Apply _D Val"
	created_nodes["Apply _D Val"].label = "Apply _D Val"
	created_nodes["Apply _D Val"].blend_type = "VALUE"
	created_nodes["Apply _D Val"].data_type = "RGBA"
	created_nodes["Apply _D Val"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Val"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Val"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 840.0,-20.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "HUE"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-900.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "BOX"

	created_nodes["nor_map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["nor_map"].location = 760.0,-900.0
	created_nodes["nor_map"].name = "nor_map"
	created_nodes["nor_map"].label = ""

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = -20.0,-300.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.125


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["sep_r"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["nor_map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["sep_r"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["nor_map"].inputs[1])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["sep_r"].inputs[0])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Apply _D Sat"].inputs[6])
	links.new(created_nodes["Apply _D Sat"].outputs[2], created_nodes["Apply _D Val"].inputs[6])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Sat"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Val"].inputs[7])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["sep_hue"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Sat"].inputs[0])
	links.new(created_nodes["sep_hue"].outputs[1], created_nodes["Apply _D Val"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["Apply _D Val"].outputs[2], created_nodes["Principled BSDF"].inputs[0])

	return mat

def _create_nodes_PyPxzTDiffSpecNorm_PyX2Hx2(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = 300.0,240.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = 300.0,60.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -220.0,-300.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 2240.0,-280.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1960.0,-280.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Separate Color"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Separate Color"].location = 1500.0,-520.0
	created_nodes["Separate Color"].name = "Separate Color"
	created_nodes["Separate Color"].label = ""
	created_nodes["Separate Color"].mode = "RGB"

	created_nodes["Normal Map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["Normal Map"].location = 1500.0,-840.0
	created_nodes["Normal Map"].name = "Normal Map"
	created_nodes["Normal Map"].label = ""

	created_nodes["Attribute"] = nodes.new(type="ShaderNodeAttribute")
	created_nodes["Attribute"].location = 1140.0,-280.0
	created_nodes["Attribute"].name = "Attribute"
	created_nodes["Attribute"].label = ""
	created_nodes["Attribute"].attribute_name = "Color"

	created_nodes["Apply _D pxyz"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D pxyz"].location = 1340.0,-280.0
	created_nodes["Apply _D pxyz"].name = "Apply _D pxyz"
	created_nodes["Apply _D pxyz"].label = "Apply _D pxyz"
	created_nodes["Apply _D pxyz"].blend_type = "MIX"
	created_nodes["Apply _D pxyz"].data_type = "RGBA"
	created_nodes["Apply _D pxyz"].inputs["Factor"].default_value = 0.0
	created_nodes["Apply _D pxyz"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D pxyz"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _R pxyz"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _R pxyz"].location = 1340.0,-520.0
	created_nodes["Apply _R pxyz"].name = "Apply _R pxyz"
	created_nodes["Apply _R pxyz"].label = "Apply _R pxyz"
	created_nodes["Apply _R pxyz"].blend_type = "MIX"
	created_nodes["Apply _R pxyz"].data_type = "RGBA"
	created_nodes["Apply _R pxyz"].inputs["Factor"].default_value = 0.0
	created_nodes["Apply _R pxyz"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _R pxyz"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _N pxyz"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _N pxyz"].location = 1340.0,-840.0
	created_nodes["Apply _N pxyz"].name = "Apply _N pxyz"
	created_nodes["Apply _N pxyz"].label = "Apply _N pxyz"
	created_nodes["Apply _N pxyz"].blend_type = "MIX"
	created_nodes["Apply _N pxyz"].data_type = "RGBA"
	created_nodes["Apply _N pxyz"].inputs["Factor"].default_value = 0.0
	created_nodes["Apply _N pxyz"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _N pxyz"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-20.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 840.0,-20.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "HUE"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Sat"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Sat"].location = 1000.0,-20.0
	created_nodes["Apply _D Sat"].name = "Apply _D Sat"
	created_nodes["Apply _D Sat"].label = "Apply _D Sat"
	created_nodes["Apply _D Sat"].blend_type = "SATURATION"
	created_nodes["Apply _D Sat"].data_type = "RGBA"
	created_nodes["Apply _D Sat"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Sat"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Sat"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Val"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Val"].location = 1160.0,-20.0
	created_nodes["Apply _D Val"].name = "Apply _D Val"
	created_nodes["Apply _D Val"].label = "Apply _D Val"
	created_nodes["Apply _D Val"].blend_type = "VALUE"
	created_nodes["Apply _D Val"].data_type = "RGBA"
	created_nodes["Apply _D Val"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Val"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Val"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["tex_Pxyz_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Pxyz_N"].location = 200.0,-1500.0
	created_nodes["tex_Pxyz_N"].name = "tex_Pxyz_N"
	created_nodes["tex_Pxyz_N"].label = "Texture Normal Pxyz _N.dds"
	created_nodes["tex_Pxyz_N"].projection = "BOX"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-1800.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["Separate HueMask"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Separate HueMask"].location = 660.0,-20.0
	created_nodes["Separate HueMask"].name = "Separate HueMask"
	created_nodes["Separate HueMask"].label = "Separate HueMask"
	created_nodes["Separate HueMask"].mode = "RGB"

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = -220.0,-20.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-1200.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_Pxyz_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Pxyz_D"].location = 200.0,-300.0
	created_nodes["tex_Pxyz_D"].name = "tex_Pxyz_D"
	created_nodes["tex_Pxyz_D"].label = "Texture Diffuse Pxyz _D.dds"
	created_nodes["tex_Pxyz_D"].projection = "BOX"

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-20.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "FLAT"

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-600.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_Pxyz_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Pxyz_R"].location = 200.0,-900.0
	created_nodes["tex_Pxyz_R"].name = "tex_Pxyz_R"
	created_nodes["tex_Pxyz_R"].label = "Texture Roughness/Metallic Pxyz _R.dds"
	created_nodes["tex_Pxyz_R"].projection = "BOX"

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = -20.0,-300.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.03125


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["Separate Color"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["Normal Map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["Separate Color"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["Apply _N pxyz"].outputs[2], created_nodes["Normal Map"].inputs[1])
	links.new(created_nodes["Apply _R pxyz"].outputs[2], created_nodes["Separate Color"].inputs[0])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Apply _D Sat"].inputs[6])
	links.new(created_nodes["Apply _D Sat"].outputs[2], created_nodes["Apply _D Val"].inputs[6])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Sat"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Val"].inputs[7])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["Separate HueMask"].inputs[0])
	links.new(created_nodes["Separate HueMask"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["Separate HueMask"].outputs[1], created_nodes["Apply _D Sat"].inputs[0])
	links.new(created_nodes["Separate HueMask"].outputs[1], created_nodes["Apply _D Val"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_Pxyz_D"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_Pxyz_N"].inputs[0])
	links.new(created_nodes["Apply _D pxyz"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Apply _D pxyz"].inputs[0])
	links.new(created_nodes["Apply _D Val"].outputs[2], created_nodes["Apply _D pxyz"].inputs[7])
	links.new(created_nodes["tex_Pxyz_D"].outputs[0], created_nodes["Apply _D pxyz"].inputs[6])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Apply _R pxyz"].inputs[0])
	links.new(created_nodes["tex_Pxyz_N"].outputs[0], created_nodes["Apply _N pxyz"].inputs[6])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["Apply _N pxyz"].inputs[7])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Apply _N pxyz"].inputs[0])
	links.new(created_nodes["Separate Color"].outputs[2], created_nodes["Principled BSDF"].inputs[12])
	links.new(created_nodes["tex_Pxyz_R"].outputs[0], created_nodes["Apply _R pxyz"].inputs[6])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["Apply _R pxyz"].inputs[7])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_Pxyz_R"].inputs[0])

	return mat

def _create_nodes_PyPxzTLayered(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = 300.0,60.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 2429.999755859375,-280.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-20.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "FLAT"

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = 300.0,240.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-600.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_Pxyz_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Pxyz_D"].location = 200.0,-300.0
	created_nodes["tex_Pxyz_D"].name = "tex_Pxyz_D"
	created_nodes["tex_Pxyz_D"].label = "Texture Diffuse Pxyz _D.dds"
	created_nodes["tex_Pxyz_D"].projection = "BOX"

	created_nodes["Separate Color"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Separate Color"].location = 1700.0,-520.0
	created_nodes["Separate Color"].name = "Separate Color"
	created_nodes["Separate Color"].label = ""
	created_nodes["Separate Color"].mode = "RGB"

	created_nodes["tex_Pxyz_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Pxyz_R"].location = 200.0,-900.0
	created_nodes["tex_Pxyz_R"].name = "tex_Pxyz_R"
	created_nodes["tex_Pxyz_R"].label = "Texture Roughness/Metallic Pxyz _R.dds"
	created_nodes["tex_Pxyz_R"].projection = "FLAT"

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 2149.999755859375,-280.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Normal Map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["Normal Map"].location = 1700.0,-840.0
	created_nodes["Normal Map"].name = "Normal Map"
	created_nodes["Normal Map"].label = ""

	created_nodes["tex_M"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_M"].location = 200.0,-2080.0
	created_nodes["tex_M"].name = "tex_M"
	created_nodes["tex_M"].label = "Texture Mask _M.dds"
	created_nodes["tex_M"].projection = "FLAT"

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -220.0,-300.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = -220.0,-20.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Attribute"] = nodes.new(type="ShaderNodeAttribute")
	created_nodes["Attribute"].location = 1140.0,-280.0
	created_nodes["Attribute"].name = "Attribute"
	created_nodes["Attribute"].label = ""
	created_nodes["Attribute"].attribute_name = "Color"

	created_nodes["Apply _R pxyz"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _R pxyz"].location = 1340.0,-520.0
	created_nodes["Apply _R pxyz"].name = "Apply _R pxyz"
	created_nodes["Apply _R pxyz"].label = "Apply _R pxyz"
	created_nodes["Apply _R pxyz"].blend_type = "MIX"
	created_nodes["Apply _R pxyz"].data_type = "RGBA"
	created_nodes["Apply _R pxyz"].inputs["Factor"].default_value = 0.0
	created_nodes["Apply _R pxyz"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _R pxyz"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _N pxyz"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _N pxyz"].location = 1340.0,-840.0
	created_nodes["Apply _N pxyz"].name = "Apply _N pxyz"
	created_nodes["Apply _N pxyz"].label = "Apply _N pxyz"
	created_nodes["Apply _N pxyz"].blend_type = "MIX"
	created_nodes["Apply _N pxyz"].data_type = "RGBA"
	created_nodes["Apply _N pxyz"].inputs["Factor"].default_value = 0.0
	created_nodes["Apply _N pxyz"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _N pxyz"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-20.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 860.0,-20.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "MIX"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 1.0
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Apply _D pxyz"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D pxyz"].location = 1340.0,-280.0
	created_nodes["Apply _D pxyz"].name = "Apply _D pxyz"
	created_nodes["Apply _D pxyz"].label = "Apply _D pxyz"
	created_nodes["Apply _D pxyz"].blend_type = "MIX"
	created_nodes["Apply _D pxyz"].data_type = "RGBA"
	created_nodes["Apply _D pxyz"].inputs["Factor"].default_value = 0.0
	created_nodes["Apply _D pxyz"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D pxyz"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Separate HueMask"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Separate HueMask"].location = 660.0,-20.0
	created_nodes["Separate HueMask"].name = "Separate HueMask"
	created_nodes["Separate HueMask"].label = "Separate HueMask"
	created_nodes["Separate HueMask"].mode = "RGB"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-1180.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_Pxyz_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Pxyz_N"].location = 200.0,-1500.0
	created_nodes["tex_Pxyz_N"].name = "tex_Pxyz_N"
	created_nodes["tex_Pxyz_N"].label = "Texture Normal Pxyz _N.dds"
	created_nodes["tex_Pxyz_N"].projection = "BOX"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-1800.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = -20.0,-300.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.03125


	links = mat.node_tree.links
	links.new(created_nodes["Separate Color"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["Separate Color"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["Separate HueMask"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_M"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_Pxyz_D"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_Pxyz_N"].inputs[0])
	links.new(created_nodes["Apply _D pxyz"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Apply _D pxyz"].inputs[0])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Apply _R pxyz"].inputs[0])
	links.new(created_nodes["tex_Pxyz_N"].outputs[0], created_nodes["Apply _N pxyz"].inputs[6])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Apply _N pxyz"].inputs[0])
	links.new(created_nodes["Separate Color"].outputs[2], created_nodes["Principled BSDF"].inputs[12])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["tex_Pxyz_D"].outputs[0], created_nodes["Apply _D pxyz"].inputs[6])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Apply _D pxyz"].inputs[7])
	links.new(created_nodes["Separate HueMask"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["Apply _R pxyz"].outputs[2], created_nodes["Separate Color"].inputs[0])
	links.new(created_nodes["tex_Pxyz_R"].outputs[0], created_nodes["Apply _R pxyz"].inputs[6])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["Apply _R pxyz"].inputs[7])
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["Apply _N pxyz"].outputs[2], created_nodes["Normal Map"].inputs[1])
	links.new(created_nodes["Normal Map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["Apply _N pxyz"].inputs[7])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_Pxyz_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])

	return mat

def _create_nodes_TAdd(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 760.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 480.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 3.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Math"] = nodes.new(type="ShaderNodeMath")
	created_nodes["Math"].location = 200.0,-580.0
	created_nodes["Math"].name = "Math"
	created_nodes["Math"].label = ""

	created_nodes["tex_I"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_I"].location = 200.0,-300.0
	created_nodes["tex_I"].name = "tex_I"
	created_nodes["tex_I"].label = "Texture Illum _I.dds"
	created_nodes["tex_I"].projection = "FLAT"


	links = mat.node_tree.links
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_I"].inputs[0])
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_I"].outputs[0], created_nodes["Principled BSDF"].inputs[26])
	links.new(created_nodes["Math"].outputs[0], created_nodes["Principled BSDF"].inputs[4])

	return mat

def _create_nodes_TAddModCV(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 760.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 480.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 3.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Math"] = nodes.new(type="ShaderNodeMath")
	created_nodes["Math"].location = 200.0,-580.0
	created_nodes["Math"].name = "Math"
	created_nodes["Math"].label = ""

	created_nodes["Attribute"] = nodes.new(type="ShaderNodeAttribute")
	created_nodes["Attribute"].location = 0.0,-580.0
	created_nodes["Attribute"].name = "Attribute"
	created_nodes["Attribute"].label = ""
	created_nodes["Attribute"].attribute_name = "Color"

	created_nodes["tex_I"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_I"].location = 200.0,-300.0
	created_nodes["tex_I"].name = "tex_I"
	created_nodes["tex_I"].label = "Texture Illum _I.dds"
	created_nodes["tex_I"].projection = "FLAT"


	links = mat.node_tree.links
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_I"].inputs[0])
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_I"].outputs[0], created_nodes["Principled BSDF"].inputs[26])
	links.new(created_nodes["Math"].outputs[0], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["Attribute"].outputs[3], created_nodes["Math"].inputs[0])

	return mat

def _create_nodes_TDiff_Spec_Norm(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Separate Color"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Separate Color"].location = 480.0,-580.0
	created_nodes["Separate Color"].name = "Separate Color"
	created_nodes["Separate Color"].label = ""
	created_nodes["Separate Color"].mode = "RGB"

	created_nodes["Normal Map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["Normal Map"].location = 480.0,-860.0
	created_nodes["Normal Map"].name = "Normal Map"
	created_nodes["Normal Map"].label = ""

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1000.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 720.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-580.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-860.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["Separate Color"].inputs[0])
	links.new(created_nodes["Separate Color"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["Separate Color"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["Normal Map"].inputs[1])
	links.new(created_nodes["Normal Map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])

	return mat

def _create_nodes_TDSN_CubeOut(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1940.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Get _D HueMask"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Get _D HueMask"].location = 660.0,-20.0
	created_nodes["Get _D HueMask"].name = "Get _D HueMask"
	created_nodes["Get _D HueMask"].label = "Get _D HueMask"
	created_nodes["Get _D HueMask"].mode = "RGB"

	created_nodes["Apply _D Sat"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Sat"].location = 1000.0,-20.0
	created_nodes["Apply _D Sat"].name = "Apply _D Sat"
	created_nodes["Apply _D Sat"].label = "Apply _D Sat"
	created_nodes["Apply _D Sat"].blend_type = "SATURATION"
	created_nodes["Apply _D Sat"].data_type = "RGBA"
	created_nodes["Apply _D Sat"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Sat"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Sat"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply _D Val"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Val"].location = 1160.0,-20.0
	created_nodes["Apply _D Val"].name = "Apply _D Val"
	created_nodes["Apply _D Val"].label = "Apply _D Val"
	created_nodes["Apply _D Val"].blend_type = "VALUE"
	created_nodes["Apply _D Val"].data_type = "RGBA"
	created_nodes["Apply _D Val"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Val"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Val"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Normal Map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["Normal Map"].location = 480.0,-860.0
	created_nodes["Normal Map"].name = "Normal Map"
	created_nodes["Normal Map"].label = ""

	created_nodes["Separate Color"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Separate Color"].location = 480.0,-580.0
	created_nodes["Separate Color"].name = "Separate Color"
	created_nodes["Separate Color"].label = ""
	created_nodes["Separate Color"].mode = "RGB"

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1660.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 3.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = 300.0,60.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = 300.0,240.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-20.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 840.0,-20.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "HUE"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["tex_I"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_I"].location = 200.0,-1140.0
	created_nodes["tex_I"].name = "tex_I"
	created_nodes["tex_I"].label = "Texture Illum _I.dds"
	created_nodes["tex_I"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-860.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-580.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-20.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "FLAT"


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["Separate Color"].inputs[0])
	links.new(created_nodes["Separate Color"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["Separate Color"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["Normal Map"].inputs[1])
	links.new(created_nodes["Normal Map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Apply _D Sat"].inputs[6])
	links.new(created_nodes["Apply _D Sat"].outputs[2], created_nodes["Apply _D Val"].inputs[6])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["Apply _D Val"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Sat"].inputs[7])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Val"].inputs[7])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["Get _D HueMask"].inputs[0])
	links.new(created_nodes["Get _D HueMask"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["Get _D HueMask"].outputs[1], created_nodes["Apply _D Sat"].inputs[0])
	links.new(created_nodes["Get _D HueMask"].outputs[1], created_nodes["Apply _D Val"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Principled BSDF"].inputs[4])
	links.new(created_nodes["Separate Color"].outputs[2], created_nodes["Principled BSDF"].inputs[12])
	links.new(created_nodes["tex_I"].outputs[0], created_nodes["Principled BSDF"].inputs[26])

	return mat

def _create_nodes_TDSN_CubeOut_DispIn(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = -1040.0,-40.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["Tangent"] = nodes.new(type="ShaderNodeTangent")
	created_nodes["Tangent"].location = -560.0,-980.0
	created_nodes["Tangent"].name = "Tangent"
	created_nodes["Tangent"].label = ""
	created_nodes["Tangent"].direction_type = "UV_MAP"

	created_nodes["Paralax Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Paralax Geometry"].location = -560.0,-740.0
	created_nodes["Paralax Geometry"].name = "Paralax Geometry"
	created_nodes["Paralax Geometry"].label = "Paralax Geometry"

	created_nodes["dor_cross_pr"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["dor_cross_pr"].location = -340.0,-1000.0
	created_nodes["dor_cross_pr"].name = "dor_cross_pr"
	created_nodes["dor_cross_pr"].label = ""
	created_nodes["dor_cross_pr"].operation = "DOT_PRODUCT"

	created_nodes["cross_pr"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["cross_pr"].location = -340.0,-860.0
	created_nodes["cross_pr"].name = "cross_pr"
	created_nodes["cross_pr"].label = ""
	created_nodes["cross_pr"].operation = "CROSS_PRODUCT"

	created_nodes["dot_pr"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["dot_pr"].location = -340.0,-720.0
	created_nodes["dot_pr"].name = "dot_pr"
	created_nodes["dot_pr"].label = ""
	created_nodes["dot_pr"].operation = "DOT_PRODUCT"

	created_nodes["scale_h"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["scale_h"].location = -340.0,-580.0
	created_nodes["scale_h"].name = "scale_h"
	created_nodes["scale_h"].label = "Scale _H"
	created_nodes["scale_h"].operation = "SCALE"
	created_nodes["scale_h"].inputs["Scale"].default_value = 0.10000002384185791

	created_nodes["scale_h_on_geo"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["scale_h_on_geo"].location = -160.0,-580.0
	created_nodes["scale_h_on_geo"].name = "scale_h_on_geo"
	created_nodes["scale_h_on_geo"].label = "Scale _H on geo"
	created_nodes["scale_h_on_geo"].operation = "SCALE"
	created_nodes["scale_h_on_geo"].inputs["Scale"].default_value = 0.29999998211860657

	created_nodes["subs_uv"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["subs_uv"].location = 20.0,-580.0
	created_nodes["subs_uv"].name = "subs_uv"
	created_nodes["subs_uv"].label = "Subs _H on UV"
	created_nodes["subs_uv"].operation = "SUBTRACT"

	created_nodes["Combine Parallax Geo"] = nodes.new(type="ShaderNodeCombineXYZ")
	created_nodes["Combine Parallax Geo"].location = -160.0,-720.0
	created_nodes["Combine Parallax Geo"].name = "Combine Parallax Geo"
	created_nodes["Combine Parallax Geo"].label = "Combine Parallax Geo"

	created_nodes["Normal Map"] = nodes.new(type="ShaderNodeNormalMap")
	created_nodes["Normal Map"].location = 480.0,-1420.0
	created_nodes["Normal Map"].name = "Normal Map"
	created_nodes["Normal Map"].label = "Normal Map"

	created_nodes["Mix Illums"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Mix Illums"].location = 480.0,-1700.0
	created_nodes["Mix Illums"].name = "Mix Illums"
	created_nodes["Mix Illums"].label = "Mix Illums"
	created_nodes["Mix Illums"].blend_type = "ADD"
	created_nodes["Mix Illums"].data_type = "RGBA"
	created_nodes["Mix Illums"].inputs["Factor"].default_value = 1.0
	created_nodes["Mix Illums"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Mix Illums"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Mix _L and _I"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Mix _L and _I"].location = 860.0,-580.0
	created_nodes["Mix _L and _I"].name = "Mix _L and _I"
	created_nodes["Mix _L and _I"].label = "Mix _L and _I"
	created_nodes["Mix _L and _I"].blend_type = "MULTIPLY"
	created_nodes["Mix _L and _I"].data_type = "RGBA"
	created_nodes["Mix _L and _I"].inputs["Factor"].default_value = 1.0
	created_nodes["Mix _L and _I"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Mix _L and _I"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1760.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Enable _L HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _L HueMask"].location = 480.0,-860.0
	created_nodes["Enable _L HueMask"].name = "Enable _L HueMask"
	created_nodes["Enable _L HueMask"].label = "Enable _L HueMask"
	created_nodes["Enable _L HueMask"].blend_type = "MIX"
	created_nodes["Enable _L HueMask"].data_type = "RGBA"
	created_nodes["Enable _L HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _L HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _L HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["hue_color"] = nodes.new(type="ShaderNodeRGB")
	created_nodes["hue_color"].location = -840.0,-180.0
	created_nodes["hue_color"].name = "hue_color"
	created_nodes["hue_color"].label = "Hue Color"

	created_nodes["use_hue_color"] = nodes.new(type="ShaderNodeValue")
	created_nodes["use_hue_color"].location = -840.0,-360.0
	created_nodes["use_hue_color"].name = "use_hue_color"
	created_nodes["use_hue_color"].label = "Use Hue Color"

	created_nodes["tex_H"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_H"].location = -840.0,-580.0
	created_nodes["tex_H"].name = "tex_H"
	created_nodes["tex_H"].label = "Texture Height _H.dds"
	created_nodes["tex_H"].projection = "FLAT"

	created_nodes["Get _L HueMask"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Get _L HueMask"].location = 660.0,-860.0
	created_nodes["Get _L HueMask"].name = "Get _L HueMask"
	created_nodes["Get _L HueMask"].label = "Get _L HueMask"
	created_nodes["Get _L HueMask"].mode = "RGB"

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 1480.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 10.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Split _R"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Split _R"].location = 480.0,-1140.0
	created_nodes["Split _R"].name = "Split _R"
	created_nodes["Split _R"].label = "Split _R"
	created_nodes["Split _R"].mode = "RGB"

	created_nodes["Enable _D HueMask"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Enable _D HueMask"].location = 480.0,-20.0
	created_nodes["Enable _D HueMask"].name = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].label = "Enable _D HueMask"
	created_nodes["Enable _D HueMask"].blend_type = "MIX"
	created_nodes["Enable _D HueMask"].data_type = "RGBA"
	created_nodes["Enable _D HueMask"].inputs["Factor"].default_value = 0.5
	created_nodes["Enable _D HueMask"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Enable _D HueMask"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["Get _D HueMask"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Get _D HueMask"].location = 660.0,-20.0
	created_nodes["Get _D HueMask"].name = "Get _D HueMask"
	created_nodes["Get _D HueMask"].label = "Get _D HueMask"
	created_nodes["Get _D HueMask"].mode = "RGB"

	created_nodes["Apply _D Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _D Hue"].location = 860.0,-20.0
	created_nodes["Apply _D Hue"].name = "Apply _D Hue"
	created_nodes["Apply _D Hue"].label = "Apply _D Hue"
	created_nodes["Apply _D Hue"].blend_type = "MIX"
	created_nodes["Apply _D Hue"].data_type = "RGBA"
	created_nodes["Apply _D Hue"].inputs["Factor"].default_value = 1.0
	created_nodes["Apply _D Hue"].inputs["A"].default_value = (0.0,0.0,0.0,1.0)
	created_nodes["Apply _D Hue"].inputs["B"].default_value = (0.0,0.0,0.0,1.0)

	created_nodes["tex_L"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_L"].location = 200.0,-580.0
	created_nodes["tex_L"].name = "tex_L"
	created_nodes["tex_L"].label = "Texture Light _L.dds"
	created_nodes["tex_L"].projection = "FLAT"

	created_nodes["tex_L_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_L_HueMask"].location = 200.0,-860.0
	created_nodes["tex_L_HueMask"].name = "tex_L_HueMask"
	created_nodes["tex_L_HueMask"].label = "Texture Light _L_HueMask.dds"
	created_nodes["tex_L_HueMask"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 200.0,-1140.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness/Metallic _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 200.0,-1420.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["tex_I"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_I"].location = 200.0,-1700.0
	created_nodes["tex_I"].name = "tex_I"
	created_nodes["tex_I"].label = "Texture Illum _I.dds"
	created_nodes["tex_I"].projection = "FLAT"

	created_nodes["tex_over_I"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_over_I"].location = 200.0,-1980.0
	created_nodes["tex_over_I"].name = "tex_over_I"
	created_nodes["tex_over_I"].label = "Main Texture Illum _I.dds"
	created_nodes["tex_over_I"].projection = "FLAT"

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = -840.0,-40.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 1.0

	created_nodes["tex_D_HueMask"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D_HueMask"].location = 200.0,-20.0
	created_nodes["tex_D_HueMask"].name = "tex_D_HueMask"
	created_nodes["tex_D_HueMask"].label = "Texture Diffuse HueMask _D_HueMask.dds"
	created_nodes["tex_D_HueMask"].projection = "FLAT"

	created_nodes["tex_D"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_D"].location = 200.0,-300.0
	created_nodes["tex_D"].name = "tex_D"
	created_nodes["tex_D"].label = "Texture Diffuse _D.dds"
	created_nodes["tex_D"].projection = "FLAT"

	created_nodes["Apply _L Hue"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply _L Hue"].location = 1040.0,-580.0
	created_nodes["Apply _L Hue"].name = "Apply _L Hue"
	created_nodes["Apply _L Hue"].label = "Apply _L Hue"
	created_nodes["Apply _L Hue"].blend_type = "MULTIPLY"
	created_nodes["Apply _L Hue"].data_type = "RGBA"
	created_nodes["Apply _L Hue"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply _L Hue"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Apply _L Hue"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Add _D Alpha"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Add _D Alpha"].location = 1220.0,-580.0
	created_nodes["Add _D Alpha"].name = "Add _D Alpha"
	created_nodes["Add _D Alpha"].label = "Add _D Alpha"
	created_nodes["Add _D Alpha"].blend_type = "MIX"
	created_nodes["Add _D Alpha"].data_type = "RGBA"
	created_nodes["Add _D Alpha"].inputs["Factor"].default_value = 0.5
	created_nodes["Add _D Alpha"].inputs["A"].default_value = (0.5,0.5,0.5,1.0)
	created_nodes["Add _D Alpha"].inputs["B"].default_value = (0.0,0.0,0.0,0.0)


	links = mat.node_tree.links
	links.new(created_nodes["Split _R"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _D HueMask"].inputs[0])
	links.new(created_nodes["Enable _D HueMask"].outputs[2], created_nodes["Get _D HueMask"].inputs[0])
	links.new(created_nodes["tex_D_HueMask"].outputs[0], created_nodes["Enable _D HueMask"].inputs[7])
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["Normal Map"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["Enable _L HueMask"].outputs[2], created_nodes["Get _L HueMask"].inputs[0])
	links.new(created_nodes["tex_L_HueMask"].outputs[0], created_nodes["Enable _L HueMask"].inputs[7])
	links.new(created_nodes["use_hue_color"].outputs[0], created_nodes["Enable _L HueMask"].inputs[0])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["Normal Map"].inputs[1])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["Split _R"].inputs[0])
	links.new(created_nodes["Get _D HueMask"].outputs[1], created_nodes["Apply _D Hue"].inputs[0])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _D Hue"].inputs[7])
	links.new(created_nodes["tex_D"].outputs[0], created_nodes["Apply _D Hue"].inputs[6])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D_HueMask"].inputs[0])
	links.new(created_nodes["Mix _L and _I"].outputs[2], created_nodes["Apply _L Hue"].inputs[6])
	links.new(created_nodes["tex_L"].outputs[0], created_nodes["Mix _L and _I"].inputs[7])
	links.new(created_nodes["Get _L HueMask"].outputs[1], created_nodes["Apply _L Hue"].inputs[0])
	links.new(created_nodes["hue_color"].outputs[0], created_nodes["Apply _L Hue"].inputs[7])
	links.new(created_nodes["Split _R"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["Add _D Alpha"].outputs[2], created_nodes["Principled BSDF"].inputs[26])
	links.new(created_nodes["Apply _D Hue"].outputs[2], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_D"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_I"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_H"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_L_HueMask"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_over_I"].inputs[0])
	links.new(created_nodes["tex_I"].outputs[0], created_nodes["Mix Illums"].inputs[6])
	links.new(created_nodes["tex_over_I"].outputs[0], created_nodes["Mix Illums"].inputs[7])
	links.new(created_nodes["Mix Illums"].outputs[2], created_nodes["Mix _L and _I"].inputs[6])
	links.new(created_nodes["cross_pr"].outputs[0], created_nodes["dor_cross_pr"].inputs[1])
	links.new(created_nodes["Tangent"].outputs[0], created_nodes["cross_pr"].inputs[1])
	links.new(created_nodes["Paralax Geometry"].outputs[4], created_nodes["dot_pr"].inputs[0])
	links.new(created_nodes["scale_h_on_geo"].outputs[0], created_nodes["subs_uv"].inputs[1])
	links.new(created_nodes["Paralax Geometry"].outputs[4], created_nodes["dor_cross_pr"].inputs[0])
	links.new(created_nodes["scale_h"].outputs[0], created_nodes["scale_h_on_geo"].inputs[3])
	links.new(created_nodes["Combine Parallax Geo"].outputs[0], created_nodes["scale_h_on_geo"].inputs[0])
	links.new(created_nodes["Paralax Geometry"].outputs[1], created_nodes["cross_pr"].inputs[0])
	links.new(created_nodes["dot_pr"].outputs[1], created_nodes["Combine Parallax Geo"].inputs[0])
	links.new(created_nodes["Tangent"].outputs[0], created_nodes["dot_pr"].inputs[1])
	links.new(created_nodes["dor_cross_pr"].outputs[1], created_nodes["Combine Parallax Geo"].inputs[1])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["subs_uv"].inputs[0])
	links.new(created_nodes["tex_H"].outputs[0], created_nodes["scale_h"].inputs[0])
	links.new(created_nodes["subs_uv"].outputs[0], created_nodes["tex_L"].inputs[0])
	links.new(created_nodes["Apply _L Hue"].outputs[2], created_nodes["Add _D Alpha"].inputs[6])
	links.new(created_nodes["tex_D"].outputs[1], created_nodes["Add _D Alpha"].inputs[0])

	return mat

def _create_nodes_Water_MultiH(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Bump"] = nodes.new(type="ShaderNodeBump")
	created_nodes["Bump"].location = 640.0,-580.0
	created_nodes["Bump"].name = "Bump"
	created_nodes["Bump"].label = ""
	created_nodes["Bump"].inputs["Strength"].default_value = 0.05000000074505806
	created_nodes["Bump"].inputs["Distance"].default_value = 1.0

	created_nodes["Geometry"] = nodes.new(type="ShaderNodeNewGeometry")
	created_nodes["Geometry"].location = -120.0,-640.0
	created_nodes["Geometry"].name = "Geometry"
	created_nodes["Geometry"].label = ""

	created_nodes["tex_SxSySz"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_SxSySz"].location = 340.0,-580.0
	created_nodes["tex_SxSySz"].name = "tex_SxSySz"
	created_nodes["tex_SxSySz"].label = ""
	created_nodes["tex_SxSySz"].projection = "FLAT"

	created_nodes["Combine XYZ"] = nodes.new(type="ShaderNodeCombineXYZ")
	created_nodes["Combine XYZ"].location = 40.0,-440.0
	created_nodes["Combine XYZ"].name = "Combine XYZ"
	created_nodes["Combine XYZ"].label = ""

	created_nodes["tex_Fog"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_Fog"].location = 340.0,-300.0
	created_nodes["tex_Fog"].name = "tex_Fog"
	created_nodes["tex_Fog"].label = ""
	created_nodes["tex_Fog"].projection = "FLAT"

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 940.0,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = ""
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 3.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 1.0

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1240.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["uv_scale"] = nodes.new(type="ShaderNodeVectorMath")
	created_nodes["uv_scale"].location = 40.0,-640.0
	created_nodes["uv_scale"].name = "uv_scale"
	created_nodes["uv_scale"].label = "UV Scale"
	created_nodes["uv_scale"].operation = "SCALE"
	created_nodes["uv_scale"].inputs["Scale"].default_value = 0.03125


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["uv_scale"].outputs[0], created_nodes["tex_SxSySz"].inputs[0])
	links.new(created_nodes["tex_SxSySz"].outputs[0], created_nodes["Bump"].inputs[2])
	links.new(created_nodes["Geometry"].outputs[0], created_nodes["uv_scale"].inputs[0])
	links.new(created_nodes["tex_Fog"].outputs[0], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["Combine XYZ"].outputs[0], created_nodes["tex_Fog"].inputs[0])
	links.new(created_nodes["Bump"].outputs[0], created_nodes["Principled BSDF"].inputs[5])

	return mat

def _create_nodes_WaterWall(mat: bpy.types.Material) -> bpy.types.Material:
	nodes = mat.node_tree.nodes
	created_nodes = {}

	created_nodes["Material Output"] = nodes.new(type="ShaderNodeOutputMaterial")
	created_nodes["Material Output"].location = 1220.0,-300.0
	created_nodes["Material Output"].name = "Material Output"
	created_nodes["Material Output"].label = ""

	created_nodes["Principled BSDF"] = nodes.new(type="ShaderNodeBsdfPrincipled")
	created_nodes["Principled BSDF"].location = 940.0000610351562,-300.0
	created_nodes["Principled BSDF"].name = "Principled BSDF"
	created_nodes["Principled BSDF"].label = "Principled BSDF"
	created_nodes["Principled BSDF"].inputs["Emission Strength"].default_value = 0.0
	created_nodes["Principled BSDF"].inputs["Alpha"].default_value = 0.800000011920929

	created_nodes["UV Map"] = nodes.new(type="ShaderNodeUVMap")
	created_nodes["UV Map"].location = 0.0,-300.0
	created_nodes["UV Map"].name = "UV Map"
	created_nodes["UV Map"].label = ""

	created_nodes["tex_N"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_N"].location = 180.0,-1200.0
	created_nodes["tex_N"].name = "tex_N"
	created_nodes["tex_N"].label = "Texture Normal _N.dds"
	created_nodes["tex_N"].projection = "FLAT"

	created_nodes["tex_R"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_R"].location = 180.0,-900.0
	created_nodes["tex_R"].name = "tex_R"
	created_nodes["tex_R"].label = "Texture Roughness _R.dds"
	created_nodes["tex_R"].projection = "FLAT"

	created_nodes["tex_O"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_O"].location = 180.0,-600.0
	created_nodes["tex_O"].name = "tex_O"
	created_nodes["tex_O"].label = "Texture Opacity _O.dds"
	created_nodes["tex_O"].projection = "FLAT"

	created_nodes["tex_T"] = nodes.new(type="ShaderNodeTexImage")
	created_nodes["tex_T"].location = 180.0,-300.0
	created_nodes["tex_T"].name = "tex_T"
	created_nodes["tex_T"].label = "Texture Teint _T.dds"
	created_nodes["tex_T"].projection = "FLAT"

	created_nodes["Color0"] = nodes.new(type="ShaderNodeAttribute")
	created_nodes["Color0"].location = 280.0,-120.0
	created_nodes["Color0"].name = "Color0"
	created_nodes["Color0"].label = "Color0"
	created_nodes["Color0"].attribute_name = "Color"

	created_nodes["Apply Color0 _O"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply Color0 _O"].location = 500.0,-600.0
	created_nodes["Apply Color0 _O"].name = "Apply Color0 _O"
	created_nodes["Apply Color0 _O"].label = "Apply Color0 _O"
	created_nodes["Apply Color0 _O"].blend_type = "MIX"
	created_nodes["Apply Color0 _O"].data_type = "RGBA"
	created_nodes["Apply Color0 _O"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply Color0 _O"].inputs["A"].default_value = (0.0,0.0,0.0,0.0)
	created_nodes["Apply Color0 _O"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply Color0 _R"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply Color0 _R"].location = 500.0,-900.0
	created_nodes["Apply Color0 _R"].name = "Apply Color0 _R"
	created_nodes["Apply Color0 _R"].label = "Apply Color0 _R"
	created_nodes["Apply Color0 _R"].blend_type = "MIX"
	created_nodes["Apply Color0 _R"].data_type = "RGBA"
	created_nodes["Apply Color0 _R"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply Color0 _R"].inputs["A"].default_value = (0.0,0.0,0.0,0.0)
	created_nodes["Apply Color0 _R"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Apply Color0 _N"] = nodes.new(type="ShaderNodeMix")
	created_nodes["Apply Color0 _N"].location = 500.0,-1200.0
	created_nodes["Apply Color0 _N"].name = "Apply Color0 _N"
	created_nodes["Apply Color0 _N"].label = "Apply Color0 _N"
	created_nodes["Apply Color0 _N"].blend_type = "MIX"
	created_nodes["Apply Color0 _N"].data_type = "RGBA"
	created_nodes["Apply Color0 _N"].inputs["Factor"].default_value = 0.5
	created_nodes["Apply Color0 _N"].inputs["A"].default_value = (0.0,0.0,0.0,0.0)
	created_nodes["Apply Color0 _N"].inputs["B"].default_value = (0.5,0.5,0.5,1.0)

	created_nodes["Bump _N"] = nodes.new(type="ShaderNodeBump")
	created_nodes["Bump _N"].location = 720.0,-1200.0
	created_nodes["Bump _N"].name = "Bump _N"
	created_nodes["Bump _N"].label = "Bump _N"
	created_nodes["Bump _N"].inputs["Strength"].default_value = 0.05000000074505806
	created_nodes["Bump _N"].inputs["Distance"].default_value = 1.0

	created_nodes["Invert Color"] = nodes.new(type="ShaderNodeInvert")
	created_nodes["Invert Color"].location = 720.0,-600.0
	created_nodes["Invert Color"].name = "Invert Color"
	created_nodes["Invert Color"].label = ""

	created_nodes["Split _R"] = nodes.new(type="ShaderNodeSeparateColor")
	created_nodes["Split _R"].location = 720.0,-900.0
	created_nodes["Split _R"].name = "Split _R"
	created_nodes["Split _R"].label = "Split _R"
	created_nodes["Split _R"].mode = "RGB"


	links = mat.node_tree.links
	links.new(created_nodes["Principled BSDF"].outputs[0], created_nodes["Material Output"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_T"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_O"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_R"].inputs[0])
	links.new(created_nodes["UV Map"].outputs[0], created_nodes["tex_N"].inputs[0])
	links.new(created_nodes["Split _R"].outputs[0], created_nodes["Principled BSDF"].inputs[2])
	links.new(created_nodes["Bump _N"].outputs[0], created_nodes["Principled BSDF"].inputs[5])
	links.new(created_nodes["Invert Color"].outputs[0], created_nodes["Principled BSDF"].inputs[17])
	links.new(created_nodes["tex_T"].outputs[0], created_nodes["Principled BSDF"].inputs[0])
	links.new(created_nodes["Apply Color0 _O"].outputs[2], created_nodes["Invert Color"].inputs[1])
	links.new(created_nodes["Apply Color0 _R"].outputs[2], created_nodes["Split _R"].inputs[0])
	links.new(created_nodes["Apply Color0 _N"].outputs[2], created_nodes["Bump _N"].inputs[2])
	links.new(created_nodes["Color0"].outputs[3], created_nodes["Apply Color0 _N"].inputs[0])
	links.new(created_nodes["tex_N"].outputs[0], created_nodes["Apply Color0 _N"].inputs[7])
	links.new(created_nodes["tex_R"].outputs[0], created_nodes["Apply Color0 _R"].inputs[7])
	links.new(created_nodes["Color0"].outputs[3], created_nodes["Apply Color0 _R"].inputs[0])
	links.new(created_nodes["tex_O"].outputs[0], created_nodes["Apply Color0 _O"].inputs[7])
	links.new(created_nodes["Color0"].outputs[3], created_nodes["Apply Color0 _O"].inputs[0])
	links.new(created_nodes["Split _R"].outputs[1], created_nodes["Principled BSDF"].inputs[1])
	links.new(created_nodes["Split _R"].outputs[2], created_nodes["Principled BSDF"].inputs[12])

	return mat



MATERIAL_NODES_CREATORS = {
	"DecalGeom": _create_nodes_DecalGeom,
	"DecalGeom_TOp_PyPxzDSN_X2": _create_nodes_DecalGeom_TOp_PyPxzDSN_X2,
	"DynaFacing_ForceNMap_CubeOut_TestOp": _create_nodes_DynaFacing_ForceNMap_CubeOut_TestOp,
	"GlassBasic": _create_nodes_GlassBasic,
	"GrassX2": _create_nodes_GrassX2,
	"PyPxz_Hue": _create_nodes_PyPxz_Hue,
	"PyPxzDiff_Spec_Norm": _create_nodes_PyPxzDiff_Spec_Norm,
	"PyPxzDiff_Spec_Norm_LM1": _create_nodes_PyPxzDiff_Spec_Norm_LM1,
	"PyPxzTDiffSpecNorm_PyX2Hx2": _create_nodes_PyPxzTDiffSpecNorm_PyX2Hx2,
	"PyPxzTLayered": _create_nodes_PyPxzTLayered,
	"TAdd": _create_nodes_TAdd,
	"TAddModCV": _create_nodes_TAddModCV,
	"TDiff_Spec_Norm": _create_nodes_TDiff_Spec_Norm,
	"TDSN_CubeOut": _create_nodes_TDSN_CubeOut,
	"TDSN_CubeOut_DispIn": _create_nodes_TDSN_CubeOut_DispIn,
	"Water_MultiH": _create_nodes_Water_MultiH,
	"WaterWall": _create_nodes_WaterWall,
}
